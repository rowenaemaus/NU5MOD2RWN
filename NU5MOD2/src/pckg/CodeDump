// Client
	

	
	// select file
	String filename = selectFile();
	printMessage("|| Client: selected file");

	// read file in
	Integer[] fileContents = readFile(filename);
	printMessage("|| Client: file read");

	// make into packets

	// send the packets
	
		public String selectFile() {
		// TODO pick file
		printMessage("|| Client, what file do you want to send to server?\n>");
		return ("src/image1.png");
	}
	
	
	

	public Integer[] readFile(String filename) {
		try {
			File fileToSend = new File(filename);
			FileInputStream fileStream = new FileInputStream(fileToSend);
			Integer[] filecontent = new Integer[(int) fileToSend.length()];

			for (int i = 0; i < filecontent.length; i++) {
				int nextByte = fileStream.read();
				if (nextByte == -1) {
					throw new Exception("ERROR: File size is smaller than reported");
				}
				filecontent[i] = nextByte;
			}
			return filecontent;
		} catch (Exception e) {
			e.printStackTrace();
			printMessage("ERROR: Client unable to setup filestream");
			return null;
		}
	}
	
	
		public void askDest() {
		printMessage("|| Hello user. What IP is the server you want to connect to on?\n>\b");
		Scanner keyboard = new Scanner(System.in);
		//		String ip = keyboard.nextLine();
		String ip = null;
		try {
			ip = InetAddress.getLocalHost().getHostAddress();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		printMessage(String.format("|| You entered: %s", ip));
		// TODO check valid ip
		serverIP = ip;
		printMessage("|| And on what port?\n>");
		//		int port = keyboard.nextInt();
		int port = 8070;
		printMessage(String.format("|| You entered: %d", port));
		serverPort = port;
		// TODO check valid port
		printMessage(String.format("|| Trying to set up a connection with <%s,%d>", serverIP, serverPort));
	}
	
	
	
	public boolean createConnection() {
		clearConnection();

		while (socket == null) {
			try {
				//				clientIP = InetAddress.getLocalHost().getHostAddress();
				//				clientPort = getIPPort();

				// TODO send broadcast
				printMessage(String.format("|| Client on <%s,%d>", clientIP, clientPort));
				printMessage(String.format("|| Server on <%s,%d>", serverIP, serverPort));

				socket = new DatagramSocket(clientPort);
				//				in = new Scanner(new BufferedInputStream(socket.getInputStream()));
				//				out = new PrintStream(new BufferedOutputStream(socket.getOutputStream()));
				printMessage("|| Client socket set up!");
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println(e);
				return false;
			}
		}
		return (socket != null);
	}

	public void clearConnection() {
		socket = null;
		in = null;
		out = null;
	}

	public void closeConnection() {
		printMessage("|| Client closing the connection...");
		try {
			in.close();
			out.close();
			socket.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	
	///////////////////////////////////////////////
	
	
	Server:
	
		public byte[] readFile(String filename) {
		try {
			printMessage(String.format("]] Ready to read file %s", filename));
			File fileToSend = new File(filename);
			byte[] fileContent = Files.readAllBytes(fileToSend.toPath());
			printMessage(String.format("]] File <%s> read", filename));

			//			FileInputStream fileStream = new FileInputStream(fileToSend);
			//			Integer[] filecontent = new Integer[(int) fileToSend.length()];
			//
			//			for (int i = 0; i < filecontent.length; i++) {
			//				int nextByte = fileStream.read();
			//				if (nextByte == -1) {
			//					throw new Exception("ERROR: File size is smaller than reported");
			//				}
			//				filecontent[i] = nextByte;
			//			}
			return fileContent;
		} catch (Exception e) {
			e.printStackTrace();
			printMessage("ERROR: Server unable to setup filestream");
			return null;
		}
	}
	
	
		public int getPort() {
		//TODO implement
		return 8070;
	}
	
	
	
		public void connectionRequest() {
		try {
			DatagramPacket request = new DatagramPacket(new byte[1], 1);
			ssock.receive(request);
			clientAddress = request.getAddress();
			clientPort = request.getPort();
			printMessage("]] Connection packet received");
			printMessage("]] Server sending ack");
			sendPacket("Connect".getBytes());
		} catch (IOException e) {
			printMessage("ERROR: failed connection request!");
			e.printStackTrace();
		}
	}
	
	
	
	run()
	
		boolean openNewSocket = true;
		while (openNewSocket) {
			try {
				setupSock();
				printMessage("]] Server socket set up");

				numFiles = countFiles();
				printMessage(String.format("]] Server stores %d files", numFiles));
				printFiles();

				//				inputScanner = new Scanner(new BufferedInputStream(sock.getInputStream()));
				//				outputStream = new PrintStream(new BufferedOutputStream(sock.getOutputStream()));
				//				printMessage("> Server I/O set up.");

				printMessage("]] Server waiting to connect with client");
//				connectionRequest();

				while(true) {
					printMessage("]] Server waiting for incoming packets");
					DatagramPacket receivedData = receivePacket();
					
					// if data is 'connectreq'
					saveAddress(receivedData);
					
					
					System.out.println("Flag2");
					String response = "Hey i got u";
					
					System.out.println("Flag3");
					byte[] buffer = new byte[512];
					System.out.println("Flag4");
					sendPacket(response.getBytes());
					System.out.println("Flag5");
					




//					// wait for client request of image
//					String filename = ("src/image1.png");
//
//					// read file in
//					byte[] fileContents = readFile(filename);
//					printMessage("]] Server file read");
//
//					// make into packets
//
//					// send using stop wait
//					printMessage("]] Getting ready to send");
////					sendPacket(fileContents);	
				}

			} catch (Exception e) {
				e.printStackTrace();
			}
	
	
	
	
	
	
	
	
		public void getOthersIP() {
		//TODO implement broadcast etc
		setOtherIP(ownIP);
		if (name.equalsIgnoreCase("client")) {
			setOtherPort(8070);
		} else {
			setOtherPort(8071);
		}
	}
	
	
		// TODO gebruik je deze uberhaupt?
	public int countFiles() {
		File folder = new File("bin/");
		return folder.listFiles().length;
	}
	
	
	
	
	
	
	
		//		File file = new File("/Users/rowena.emaus/nu-module-2/example_files/image1.png");
		//		try {
		//			BufferedReader br = new BufferedReader(new FileReader(file));
		//		} catch (FileNotFoundException e) {
		//			e.printStackTrace();
		//		} 

		//		udp.sendFile(file);

		//		byte[] received = udp.receivePacket();

	
	
	
	
	//
//	public void printFiles() {
//		printMessage("]] Memory contains:");
//		File[] files = fileLocation.listFiles();
//
//		int i = 0;
//		for (File file : files){
//			if (file.isFile()) {
//				file.getName();
//				i++;
//				printMessage(String.format("]] %(-10d: %s", i, file.getName()));
//			}
//		}
//		printMessage("]] ------");
//		if (files.length < maxFiles) {
//			printMessage(String.format("]] %-10s: Add new file", "O"));
//		} else {
//			printMessage("]] -- Adding files not possible, max storage used --");
//		}
//		printMessage(String.format("]] %-10s: Remove file", "X"));
//		printMessage("\n");
//	}

	public int countFiles() {
		File folder = new File("src/");
		return folder.listFiles().length;
	}
	
	
	
	File fileLocation = new File("src/filesRowena");
	
	
	
	
	
	
	
	
	
	
	
	
	